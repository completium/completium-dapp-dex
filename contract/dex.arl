archetype dex

constant gamma         : rational = 1 - 0.003
constant epsilon       : nat = 1
constant initialminted : nat = 1_000_000

variable admin : address = @tz1Lc2qBKEWCBeDU8npG6zCeCqpmaegRi6Jg

constant urlprefix : string = "https://raw.githubusercontent.com/edukera/completium-dapp-dex/master/public/icons/"

asset token {
  id       : string;      /* token label identifier  */
  addr     : address;     /* FA 1.2 contract address */
  name     : string;      /* FA 1.2 name             */
  iconurl  : string;      /* Icon                    */
  poolvalue: nat = 0;     /* XTZ value in pool       */
  totalqty : nat = 0;     /* total number of tokens  */
  totallqt : nat = 0;     /* total LTQ tokens        */
} initialized by {
  { "XPA"; @KT1MePDQK3VQooqSEwN3sN1WqyMiiGBKGkNX; "Paris"         ; concat(urlprefix,"paris_black.svg")  ; 0; 0; 0 };
  { "XLD"; @KT1H8JUiFbvEMycCuG5sZfCGHkN7vgfLAs3n; "London"        ; concat(urlprefix,"london_black.svg") ; 0; 0; 0 };
  { "XNY"; @KT1VZSKpWaQf28GudoZae85nXFMZTS6hw1MH; "New York City" ; concat(urlprefix,"nyc_black.svg")    ; 0; 0; 0 };
  { "XRO"; @KT1LpxvCD97T85RWkjGMiFgFxiYsmEHE23Sf; "Rome"          ; concat(urlprefix,"rome_black.svg")   ; 0; 0; 0 };
  { "XTK"; @KT1SVB1EuoD73CWNc6wp3vQRaeiho2GjYa7Q; "Tokyo"         ; concat(urlprefix,"tokyo_black.svg")  ; 0; 0; 0 };
  { "XAT"; @KT1PocAFBwSNK6UHdDKH97eFCPjxDgSJUUsR; "Athens"        ; concat(urlprefix,"athenes_black.svg"); 0; 0; 0 };
  { "XMO"; @KT1AKC1T8jGTACDJxyN8WvNZWJyZPYtFx4Vg; "Moscow"        ; concat(urlprefix,"moscow_black.svg") ; 0; 0; 0 };
  { "XSD"; @KT1E87BM8kauAhVzAFh1K3ob4qY1Yq9vFKen; "Sydney"        ; concat(urlprefix,"sydney_black.svg") ; 0; 0; 0 };
  { "XRI"; @KT1NkvyqZyfrCFXnxscnMnQ8atxjir1P3qNQ; "Rio de Janeiro"; concat(urlprefix,"rio_black.svg")    ; 0; 0; 0 }
}

asset liquidity identified by tokenid owner {
  tokenid  : string;      /* token id                */
  owner    : address;     /* LQT owner               */
  lqt      : nat = 0;     /* LQT quantity            */
}

entry registertoken (i : string, a : address, n : string, u : string) {
  called by admin
  effect {
    token.addupdate(i, { addr = a; name = n; iconurl = u }); }
}

entry deletetoken (i : string) {
  called by admin
  effect { token.remove(i) }
}

function compute_exchanged(aA : nat, qA : nat, qB : nat) : rational {
  return (qB * gamma * aA / (qA + gamma * aA))
}

/* 'caller' sells 'aA' of 'tA' token
   and receives 'bB' of 'tB' token
*/
entry exchange(tA : string, aA: nat, tB : string, aB : nat) {
  require {
    r0 otherwise "SRC_EQ_DST" : tA <> tB;
  }
  effect {
    if tA = "XTZ" then begin
      var qA = token[tB].poolvalue;
      var qB = token[tB].totalqty;
      var expectedB = compute_exchanged(aA,qA,qB);
      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));
      var xtzin : nat = transferred;
      if aA <> xtzin then fail(("INVALID_A_AMOUNT",xtzin));
      match_option entrypoint<(address * address * nat)>("%transfer",token[tB].addr) with
      | some(transferB) ->
        transfer 0tz to entry transferB((selfaddress, caller, aB))
      | none -> fail("INVALID_B_ENTRY")
      end;
      token.update(tB, { poolvalue += xtzin; totalqty -= aB });
    end else if tB = "XTZ" then begin
      var qA = token[tA].totalqty;
      var qB = token[tA].poolvalue;
      var expectedB = compute_exchanged(aA,qA,qB);
      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));
      match_option entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with
      | some(transferA) ->
        transfer 0tz to entry transferA((caller, selfaddress, aA))
      | none -> fail("INVALID_A_ENTRY")
      end;
      transfer (aB * 1utz) to caller;
      token.update(tA, { poolvalue -= aB; totalqty += aA });
    end else begin
      var qA  = token[tA].totalqty;
      var qTA = token[tA].poolvalue;
      var aT  = abs(floor(compute_exchanged(aA,qA,qTA)));
      var qTB = token[tB].poolvalue;
      var qB  = token[tB].totalqty;
      var expectedB = compute_exchanged(aT,qTB,qB);
      if (abs(expectedB - aB) > epsilon) then fail(("INVALID_B_AMOUNT",expectedB));
      match_option entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with
      | some(transferA) ->
        transfer 0tz to entry transferA((caller, selfaddress, aA))
      | none -> fail("INVALID_A_ENTRY")
      end;
      match_option entrypoint<(address * address * nat)>("%transfer",token[tB].addr) with
      | some(transferA) ->
        transfer 0tz to entry transferA((selfaddress, caller, aB))
      | none -> fail("INVALID_B_ENTRY")
      end;
      token.update(tA, { poolvalue -= aT; totalqty += aA });
      token.update(tB, { poolvalue += aT; totalqty -= aB });
    end
  }
}

/*
  'caller' sends XTZ and 'destqty' of 'dst' tokens so that
  the value of transferred (just approved so far) dst tokens is equal
  to the value of transferred XTZ.

  LQT tokens are minted so that it reflects the proportion of the transferred
  value towards the pool.

  Let 'mintedltq' be the number of minted LTQ tokens.
  mintedLTQ / token[dst].totalltq = transferred XTZ / token[dts].pool <=>
  mintedLTQ = token[dst].totalltq * transferred XTZ / token[dts].pool
*/
entry addLiquidity(tL : string, qL : nat) {
  /* TODO : check transferred value */
  match_option entrypoint<(address * address * nat)>("%transfer",token[tL].addr) with
   | some(transfer_src) ->
     transfer 0tz to entry transfer_src((caller, selfaddress, qL))
   | none -> fail("INVALID_DST_ENTRY")
  end;
  /* mint LQT tokens */
  var xtzin : nat = transferred;
  var mintedLTQ =
    if token[tL].poolvalue = 0 then initialminted
    else abs(floor(token[tL].totallqt * xtzin / token[tL].poolvalue));
  liquidity.addupdate((tL, caller), { lqt += mintedLTQ });
  token.update(tL, { poolvalue += xtzin; totalqty += qL; totallqt += mintedLTQ })
}

/*
  'caller' redeems its LTQ tokens; 2 transactions are generated :
  - transfer of XTZ in proportion of the token pool
  - transfer of src tokens in proportion of the token pool
*/
entry removeLiquidity(qL : nat, tA : string) {
  require {
    r1 otherwise "NOT_ENOUGHT_LQT": qL <= liquidity[(tA, caller)].lqt
  }
  effect {
    var lqtratio = qL / token[tA].totallqt;
    transfer (lqtratio * token[tA].poolvalue * 1utz) to caller;
    match_option entrypoint<(address * address * nat)>("%transfer",token[tA].addr) with
    | some(transfer_src) ->
      var qty = abs(floor(lqtratio * token[tA].totalqty));
      transfer 0tz to entry transfer_src((selfaddress, caller, qty))
    | none -> fail("INVALID_DST_ENTRY")
   end;
  }

}
